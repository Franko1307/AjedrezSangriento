/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel_de_control;

import celda.Celda;
import escenario.Escenario;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;
import sprite.PiezaDeAjedrez;

/**
 * Esta clase controla la aparición de PiezasDeAjedrez en el escenario
 * y anuncia quién es el ganador del encuentro, luego muestra datos sobre el autor.
 * @author Fran
 */
public class PanelDeControl extends javax.swing.JPanel {
    Escenario escenario;
    ArrayList<ArrayList<Celda>> matrizEscenario;
    ArrayList<PiezaDeAjedrez> piezasDeAjedrez;
    private final String[] imagenes;
    Random random = new Random();
    /**
     * Este constructor crea un arreglo de imágenes con todas las piezas
     * crea un arreglo de PiezaDeAjedrez y se liga con el Escenario y la Matriz de etiquetas
     * @param Esceneario escenario
     */
    public PanelDeControl(Escenario escenario) {
        this.imagenes = new String[]{"AlfilBlanco.png", "AlfilNegro.png", "CaballoBlanco.png", "CaballoNegro.png", "PeonBlanco.png", "PeonNegro.png", "ReinaBlanca.png", "ReinaNegra.png", "ReyBlanco.png", "ReyNegro.png", "TorreBlanca.png", "TorreNegra.png"};
        initComponents();
        piezasDeAjedrez = new ArrayList<>();
        this.escenario = escenario;
        matrizEscenario = escenario.getMatrix();
        //setSize(50,50);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelVivosBlancos = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelVivosNegros = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelMuertosBlancos = new javax.swing.JLabel();
        jLabelMuertosNegros = new javax.swing.JLabel();

        jLabel1.setText("Vivos:");

        jLabelVivosBlancos.setText("0");

        jLabel3.setText("Vivos:");

        jLabelVivosNegros.setText("0");

        jLabel5.setText("EQUIPO NEGRO");

        jLabel6.setText("Muertos: ");

        jLabel7.setText("Muertos: ");

        jLabel8.setText("EQUIPO BLANCO");

        jLabelMuertosBlancos.setText("0");

        jLabelMuertosNegros.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelMuertosBlancos, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(27, 27, 27)
                        .addComponent(jLabelVivosNegros, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)
                        .addComponent(jLabelVivosBlancos, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelMuertosNegros, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelVivosBlancos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabelMuertosBlancos))
                .addGap(44, 44, 44)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabelVivosNegros))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabelMuertosNegros))
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabelMuertosBlancos;
    public javax.swing.JLabel jLabelMuertosNegros;
    public javax.swing.JLabel jLabelVivosBlancos;
    public javax.swing.JLabel jLabelVivosNegros;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método se encarga de iniciar la partida
     * Añade las piezas de ajedrez y espera a que haya un ganador.
     */
    public void iniciarJuego() {
        this.piezasDeAjedrez.add(new PiezaDeAjedrez("PeonBlanco.png",matrizEscenario.get(4).get(0), escenario,this));
        this.piezasDeAjedrez.add(new PiezaDeAjedrez("PeonNegro.png",matrizEscenario.get(4).get(7), escenario,this));
        
        piezasDeAjedrez.get(0).start();
        piezasDeAjedrez.get(1).start();
                
        for (int i = 2; i < 60; ++i){
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                System.out.println("ERROR: NO SE PUDO DORMIR");
            }
            Celda celda = buscarCeldaDesocupada();
            piezasDeAjedrez.add(new PiezaDeAjedrez(imagenes[random.nextInt(imagenes.length)],celda,escenario,this));
            try {
                Thread.sleep(300);
            } catch (InterruptedException ex) {
                System.out.println("ERROR: NO SE PUDO DORMIR");
            }
            piezasDeAjedrez.get(i).start();
        }
        esperarPorGanadores();        
    }
    private Celda buscarCeldaDesocupada() {
        boolean ocupado;
        for (int i = 0; i < 8; ++i){
            for (int j = 0; j < 8; ++j){
                ocupado = matrizEscenario.get(i).get(j).getEstado();
                if (!ocupado) return matrizEscenario.get(i).get(j);
            }
                
        }
        return null;
    }

    private void esperarPorGanadores() {
        while ( (Integer.parseInt(jLabelVivosBlancos.getText())) > 0 && (Integer.parseInt(jLabelVivosNegros.getText())) > 0){
            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                System.out.println("ERROR: NO SE PUDO DORMIR");
            }
        }
        if ( jLabelVivosBlancos.getText().equals("0"))
            JOptionPane.showMessageDialog(null, "Ganaron los negros!");
        else JOptionPane.showMessageDialog(null, "Ganaron los blancos!");
        
        JOptionPane.showMessageDialog(null, "Programa hecho por alumno Francisco Enrique Cordova Gonzalez");
    }   
}