/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package escenario;

import celda.Celda;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author Fran
 */
public class Escenario extends javax.swing.JPanel {
    
    
    private final ArrayList<ArrayList<Celda>> escenario;
    private Image image;
    /**
     * Creates new form Escenario
     * Este constructor crea un arraylist de arraylist (matriz 2d), crea etiquetas usando la clase Celda y los
     * añade al arraylist antes mencionado
     */
    public Escenario() {        
        escenario = new ArrayList<>();
        initComponents();        
        createLabels();
        addLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void addLabels() {        
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 8; ++j)
                add(escenario.get(i).get(j));
            
    }
    private void createLabels() {
             
        for(int i = 0, k = 0; i < 8; ++i){
            escenario.add(new ArrayList());
            for(int j = 0; j < 8; ++j)
                escenario.get(i).add(new Celda(new Point(i,j), this));          
        }    
    }
    
    /**
     * Este método retorna la matriz 2D de etiquetas
     * @return ArrayList<ArrayList<Celda>> Escenario
     */
    public ArrayList<ArrayList<Celda>> getMatrix(){
        return this.escenario;
    }
    //Con este método se pinta el fondo
    @Override
    public void paintComponent(Graphics page){
        super.paintComponent(page);  
        image = (new ImageIcon(getClass().getResource("/image/Field.png"))).getImage();
        page.drawImage(image, 0, 0, null);
    }
    
}